<?php

namespace App\Models;

use App\Scopes\DeletedAdminScope;
use App\Scopes\LatestScope;
use Closure;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use Illuminate\Database\Eloquent\Relations\HasOne;
use Illuminate\Database\Eloquent\Relations\MorphOne;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Support\Facades\Cache;

class Service extends Model
{
//    use SoftDeletes;
    use HasFactory;
    protected $fillable = ['title', 'slug', 'description', 'sub_title', 'sub_description'];

    protected $hidden = ['created_at', 'updated_at'];

    protected static function boot()
    {
        // add line before boot method to avoid SoftDeletes Scope
//        static::addGlobalScope(new DeletedAdminScope);
        parent::boot(); // TODO: Change the autogenerated stub

//        static::addGlobalScope(new LatestScope());

//        static::updating(function (){
//            Cache::forget('services');
//        });
    }

    public function tags(): BelongsToMany
    {
        return $this->belongsToMany(Tag::class)->withTimestamps();
    }

    public function image(): MorphOne
    {
        return $this->morphOne(Image::class, 'imageable');
    }

//    public function comments()
//    {
//        return $this->hasMany('App\Comment')->latest();
//    }

    public function scopeLatest(Builder $query): Builder
    {
        return $query->orderBy(static::CREATED_AT, 'desc');
    }

//    public function scopeMostCommented(Builder $query)
//    {
//        return $query->withCount('comments')->orderBy('comments_count', 'desc');
//    }
}
